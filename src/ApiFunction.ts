import { aws_lambda as Lambda, aws_dynamodb, RemovalPolicy, Duration, Stack } from 'aws-cdk-lib';
import { Alarm } from 'aws-cdk-lib/aws-cloudwatch';
import { FilterPattern, IFilterPattern, MetricFilter, RetentionDays } from 'aws-cdk-lib/aws-logs';
import { StringParameter } from 'aws-cdk-lib/aws-ssm';
import { Construct } from 'constructs';
import { Statics } from './statics';

type T = Lambda.Function;

export interface ApiFunctionProps {
  apiFunction: {new(scope: Construct, id:string, props?: Lambda.FunctionProps): T };
  description: string;
  codePath: string;
  table: aws_dynamodb.ITable;
  tablePermissions: string;
  applicationUrlBase?: string;
  environment?: {[key: string]: string};
  monitorFilterPattern?: IFilterPattern;
}

export class ApiFunction extends Construct {
  lambda: Lambda.Function;

  constructor(scope: Construct, id: string, props: ApiFunctionProps) {
    super(scope, id);
    // See https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-extension-versionsx86-64.html
    const insightsArn = `arn:aws:lambda:${Stack.of(this).region}:580247275435:layer:LambdaInsightsExtension:21`;

    this.lambda = new props.apiFunction(this, 'lambda', {
      runtime: Lambda.Runtime.NODEJS_18_X, // requred but overwritten
      handler: 'index.handler', // required but overwritten
      code: Lambda.Code.fromInline('empty'), // required but overwritten
      memorySize: 512,
      description: props.description,
      insightsVersion: Lambda.LambdaInsightsVersion.fromInsightVersionArn(insightsArn),
      logRetention: RetentionDays.ONE_MONTH,
      environment: {
        SESSION_TABLE: props.table.tableName,
        APPLICATION_URL_BASE: props.applicationUrlBase || '',
        AUTH_URL_BASE: StringParameter.valueForStringParameter(this, Statics.ssmAuthUrlBaseParameter),
        AUTH_ORG_ID: StringParameter.valueForStringParameter(this, Statics.ssmAuthOrgId),
        OIDC_CLIENT_ID: StringParameter.valueForStringParameter(this, Statics.ssmOIDCClientID),
        OIDC_SCOPE: StringParameter.valueForStringParameter(this, Statics.ssmOIDCScope),
        ...props.environment,
      },
    });
    props.table.grantReadWriteData(this.lambda.grantPrincipal);
    this.monitor(props.monitorFilterPattern);
  }

  /**
   * Monitor the logs generated by this function for a filter pattern, generate metric
   * and alarm on increased error rate.
   *
   * @param monitoredBy Lambda function responsible for monitoring this function
   * @param filterPattern Pattern to filter by (default: containing ERROR)
   */
  private monitor(filterPattern?: IFilterPattern) {
    const errorMetricFilter = new MetricFilter(this, 'MetricFilter', {
      logGroup: this.lambda.logGroup,
      metricNamespace: `${Statics.projectName}/${this.node.id}`,
      metricName: 'Errors',
      filterPattern: filterPattern ?? FilterPattern.anyTerm('ERROR'),
      metricValue: '1',
    });
    errorMetricFilter.applyRemovalPolicy(RemovalPolicy.DESTROY);

    const alarm = new Alarm(this, `${Statics.projectName}-${this.node.id}-alarm`, {
      metric: errorMetricFilter.metric({
        statistic: 'sum',
        period: Duration.minutes(5),
      }),
      evaluationPeriods: 3,
      threshold: 5,
      alarmName: `Increased error rate for ${this.node.id}`,
      alarmDescription: `This alarm triggers if the function ${this.node.id} is logging more than 5 errors over n minutes.`,
    });
    alarm.applyRemovalPolicy(RemovalPolicy.DESTROY);

  }

}
